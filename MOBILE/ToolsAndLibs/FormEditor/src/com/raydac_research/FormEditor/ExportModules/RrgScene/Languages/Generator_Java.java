package com.raydac_research.FormEditor.ExportModules.RrgScene.Languages;

import com.raydac_research.FormEditor.ExportModules.RrgScene.AbstractLanguageHeaderGenerator;
import com.raydac_research.FormEditor.ExportModules.RrgScene.RrgScene;
import com.raydac_research.FormEditor.ExportModules.RrgScene.Components.RRGScene_FormsSection;
import com.raydac_research.FormEditor.ExportModules.RrgScene.Components.RRGScene_Form;
import com.raydac_research.FormEditor.ExportModules.RrgScene.Components.RRGScene_ComponentsSection;
import com.raydac_research.FormEditor.ExportModules.RrgScene.Components.RRGSceneComponent;
import com.raydac_research.FormEditor.ExportModules.RrgScene.Resources.RrgResourceSection;
import com.raydac_research.FormEditor.ExportModules.RrgScene.Resources.RRGSceneResource;

import java.io.IOException;
import java.io.PrintStream;
import java.util.Iterator;
import java.util.Date;

public class Generator_Java implements AbstractLanguageHeaderGenerator
{
    public String getExtension() throws IOException
    {
        return ".java";
    }

    public void generateHeader(String _fileNameWithoutExt, PrintStream _outStream, RrgScene _scene) throws IOException
    {
        if (_outStream == null || _scene == null) return;

        _outStream.println("/*");
        _outStream.println(" * This file was automatically generated by Form Editor");
        _outStream.println(" * Date: " + new Date(System.currentTimeMillis()));
        _outStream.println(" */");
        _outStream.println();
        _outStream.println("protected class " + _fileNameWithoutExt);
        _outStream.println("{");
        _outStream.println();

        // Выводим индексы ресурсов
        // Изображения
        RrgResourceSection p_section = _scene.getImagesSection();
        if (p_section != null)
        {
            if (p_section.size() > 0)
            {
                _outStream.println("\t//-----------IMAGE RESOURCES------------");
                _outStream.println();
                saveSectionData(_outStream, "IMG_", p_section, _scene, _scene.isImageEnabled());
                _outStream.println();
            }
        }
        // Текст
        p_section = _scene.getTextsSection();
        if (p_section != null)
        {
            if (p_section.size() > 0)
            {
                _outStream.println("\t//------------TEXT RESOURCES------------");
                _outStream.println();
                saveSectionData(_outStream, "TXT_", p_section, _scene,_scene.isTextEnabled());
                _outStream.println();
            }
        }
        // Звуки
        p_section = _scene.getSoundsSection();
        if (p_section != null)
        {
            if (p_section.size() > 0)
            {
                _outStream.println("\t//------------SOUND RESOURCES------------");
                _outStream.println();
                saveSectionData(_outStream, "SND_", p_section, _scene,_scene.isSoundEnabled());
                _outStream.println();
            }
        }
        // Фонты
        p_section = _scene.getFontsSection();
        if (p_section != null)
        {
            if (p_section.size() > 0)
            {
                _outStream.println("\t//------------FONT RESOURCES------------");
                _outStream.println();
                saveSectionData(_outStream, "FNT_", p_section, _scene,_scene.isFontEnabled());
                _outStream.println();
            }
        }
        // Формы и компоненты
        RRGScene_FormsSection p_forms = _scene.getFormsSection();
        if (p_forms != null)
        {
            if (p_forms.getSize() > 0)
            {
                _outStream.println("\t//------------FORMS------------");
                _outStream.println();
                saveFormsData(_outStream, p_forms);
                _outStream.println();

                _outStream.println("\t//------------COMPONENTS------------");
                _outStream.println();

                for(int li=0;li<p_forms.getSize();li++)
                {
                    saveFormComponentsData(_outStream,p_forms.getForm(li),_scene.hasChannelData());
                }
            }
        }
        _outStream.println("}");
    }

    private void saveFormComponentsData(PrintStream _outStream, RRGScene_Form _form,boolean _channels)
    {
        if (_form== null) return;

        String s_formName = _form.getFormID();
        RRGScene_ComponentsSection p_components = _form.getComponentsSection();

        for(int li=0;li<p_components.getSize();li++)
        {
            RRGSceneComponent p_component = p_components.getComponentAt(li);

                String s_cname = p_component.getStringID();
                int i_channel = p_component.getChannel();
                int i_id = p_component.getComponentID();

                s_cname = "COMPO_"+s_formName+"_"+s_cname;

                _outStream.println("\tprotected static final int " + s_cname + " = " + i_id+ ";");
                if (_channels) _outStream.println("\tprotected static final int " + s_cname + "_G = " + i_channel+ ";");
        }
    }

    private void saveFormsData(PrintStream _outStream, RRGScene_FormsSection _forms)
    {
        if (_forms== null) return;

        for(int li=0;li<_forms.getSize();li++)
        {
            RRGScene_Form p_form = _forms.getForm(li);

                String s_name = "FORM_" + p_form.getFormID();
                int i_poolId = p_form.getID();

                _outStream.println("\tprotected static final int " + s_name + " = " + i_poolId + ";");
        }
    }

    private void saveSectionData(PrintStream _outStream, String _postfix, RrgResourceSection _section, RrgScene _scene,boolean _writeOffset)
    {
        if (_section == null) return;

        Iterator p_iterator = _section.getResources();

        boolean lg_saveOffsets = _scene.hasOffsetsToResources();

        while (p_iterator.hasNext())
        {
            RRGSceneResource p_resource = (RRGSceneResource) p_iterator.next();

            if (p_resource.isUsed() && !p_resource.isLink())
            {
                String s_name = "RES_" + _postfix + p_resource.getID();
                int i_poolId = p_resource.getPoolID();

                _outStream.println("\tprotected static final int " + s_name + " = " + i_poolId + ";");
                if (lg_saveOffsets && _writeOffset)
                {
                    _outStream.println("\tprivate static final int " + s_name + "_offset = " + p_resource.getOffset() + ";");
                }
            }
        }
    }

}
