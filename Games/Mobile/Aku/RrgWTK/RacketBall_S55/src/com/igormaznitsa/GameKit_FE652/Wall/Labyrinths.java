package com.igormaznitsa.GameKit_FE652.Wall;

public class Labyrinths
{
    public static final int ELE_EMPTY = 0;
    public static final int ELE_WALL = 1;

    public static final int ELE_ELE1 = 2;
    protected static final int ELE_ELE1_SC = 1;

    public static final int ELE_ELE2 = 3;
    protected static final int ELE_ELE2_SC = 2;

    public static final int ELE_ELE3 = 4;
    protected static final int ELE_ELE3_SC = 3;

    public static final int ELE_SURP_BALLS = 5;
    protected static final int ELE_SURP_BALLS_SC = 1;

    public static final int ELE_SURP_WIDTH = 6;
    protected static final int ELE_SURP_WIDTH_SC = 1;

    public static final int ELE_SURP_RACKET = 7;
    protected static final int ELE_SURP_RACKET_SC = 1;

    public static final int ELE_SURP_GLUE = 8;
    protected static final int ELE_SURP_GLUE_SC = 1;

    public static final int LAB_NUMBER = 11;
    public static final int FIELD_WIDTH = 10;
    public static final int FIELD_HEIGHT = 15;
    public static final int [] indexes = {
              150, 1245334, 2490518, 3735702, 4980886, 6226070, 7471254, 8716438, 9961622, 11206806, 12451990
};

 private static final long [] storage = {
0l, 144680345676152832l, 144680345776816642l, 144680345676154370l, 144680345676153346l, 144680345676349954l, 144680345676153346l, 33686018l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
847736400248832l, 504970519150329856l, 145244386517582596l, 289074814033986050l, 217300889650659842l, 144679241869755395l, 144680354282734340l, 289074801082041346l, 50594310l, 12935430912l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
2l, 33685504l, 568456101494784l, 144678138029277184l, 514l, 8623620866l, 144680349987962880l, 144681445154095104l, 144678138029408771l, 2207663719174l, 145531371971019266l, 289360691352305666l, 33817604l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
504968307242172416l, 576460752303424002l, 217017207077601794l, 6605693453059l, 144680349987963651l, 217020522826040324l, 217303097314377728l, 289360691284935427l, 289356276058554372l, 263172l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
144680345676153603l, 4398046511875l, 217018310850510852l, 1103857124099l, 4398046511108l, 144397766876070402l, 289356276125663746l, 289357379865411584l, 1103873967108l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
217017207043915776l, 771l, 1125917137240064l, 288233674736926724l, 1028l, 216176080715777024l, 144682553323094784l, 289360682728687362l, 288795533752009218l, 144680345676350468l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
0l, 289359587528867840l, 289359587528868611l, 217020518531073028l, 217021622304310276l, 288801031410942979l, 289358492329050884l, 361981235343655938l, 289079216341910532l, 217304196826006530l, 289360691352306435l, 289360691335463683l, 217020518514230276l, 3311470314500l, 0l, 0l, 0l, 0l, -281474976710656l, 
0l, 504968315866120192l, 145524770589573634l, 289356276092371459l, 1116758868996l, 2211941843461l, 72905330438373376l, 145524770572599296l, 144678138029277184l, 260l, 520l, 16842752l, 0l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
0l, 217020505578799104l, 144682536075788291l, 288230393365660167l, 1125899957370880l, 289358483739116544l, 217019418952073220l, 433189989157700354l, 288230376202175235l, 1130315217241092l, 3311419786240l, 144680345709576196l, 216172782114046466l, 197379l, 0l, 0l, 0l, 0l, -281474976710656l, 
0l, 146369195536416768l, 217020518497649154l, 289359587528868611l, 289360691352306692l, 562950054084608l, 1108135247872l, 73467176568357377l, 144683644210970624l, 144680341347500290l, 72339069031481601l, 257l, 0l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
0l, 4398046511104l, 288230376151711748l, 217017207044178948l, 217019406067171330l, 2207613190912l, 144680345692798979l, 144118499495838210l, 289359587478470656l, 289360691352306692l, 4415226380292l, 72340168543110144l, 16842753l, 0l, 0l, 0l, 0l, 0l, -281474976710656l, 
};

	 public final static int [] getLabyrinth(int id)
	 {
	   id=indexes[id];
	   try {
 	    int[] img = new int[id&0xffff];
	    id>>>=16;
	    int pos = 0;
	    long n=0;
	    while (pos < img.length) {
	      if ((pos&7)==0)
	      /* if (pos == 0) n = storage[0];
	         else */ n=storage[id+(pos>>3)];
	      img[pos++]=(byte)n;
	      n>>>=8;
	    }
               System.gc();
	       return img;
	   } catch (Exception e) {return null;}
	 }


}