package com.igormaznitsa.GameKit_FE652.Treasure;

public class Labyrinths {
    public static final int ELE_EMPTY = 0;
    public static final int ELE_WALL = 1;
    public static final int ELE_STAIRS = 2;
    public static final int ELE_WATER = 3;
    public static final int ELE_TREASURE = 4;
    public static final int ELE_ENEMY_STARTPOS = 5;
    public static final int ELE_PLAYER_START = 6;
    public static final int ELE_DOOR = 7;
    public static final int ELE_KEY = 8;

    public static final int LAB_NUMBER = 10;

    public static final int FIELD_WIDTH = 20;
    public static final int FIELD_HEIGHT = 20;

    public static final int [] indexes = {
              400, 1638800, 3277200, 4915600, 6554000, 8192400, 9830800, 11469200, 13107600, 14746000
};

 private static final long [] storage = {
1229782938247303441l, 4398082232593l, 1229784106496163904l, 9308607461003537l, 1297036692682702848l, 18119951709663265l, 1229782865233908232l, 142037024785l, 9308465440752640l, 1297036693237530624l, 35192962039841l, 2306424724149834244l, 142035980561l, 9308465440759874l, 1297036693255356416l, 35192962023457l, 2306405959169282560l, 288234916234133504l, 1234287838967636994l, 1301840532553732369l, 35192962023457l, 2306405959169282560l, 1126041942753280l, 1229783965531906114l, 1229782938247303441l, 
1229782938247303441l, 6361361l, 144151545242451968l, 2306149773027049472l, 1229783002385482240l, 9007199288303617l, 361416069658775552l, 1297055526382731296l, 9306266419855889l, 1152921646642758144l, 9007199288295457l, 2199025422336l, 144185698822390816l, 1234285373938532352l, 1153484454568657170l, 36361193259009l, 2306405967757119490l, 288793330668666880l, 1153220580363739138l, 1157725344460050705l, 1l, 69632l, 3689348805561417728l, 1229785283872109363l, 1229782938247303441l, 
1229782938247303441l, 2167057l, 563091955777536l, 4620992834600722432l, 1162228943818850306l, 1073877281l, 2382704446864953376l, 563091957874688l, 9306403856457728l, 1161928704398458882l, 35185445961761l, 1229782937963139104l, 142038077713l, 9308465440751680l, 1297036701845299200l, 1297637172597227553l, 35184925807121l, 3539864496048701954l, 2306142076411261747l, 1152923786093474084l, 148919027679432977l, 137439023104l, 9013182412620288l, 1229786163514966080l, 1229782938247303441l, 
1229782938247303441l, 2167057l, 142036369408l, 369596508644835328l, 1324058427952989184l, 1234286537874673953l, 2167313l, 142035910688l, 4620994483870236672l, 1315051228631146496l, 9007199827403297l, 35184372158496l, 2536427300956667936l, 1229781907455213568l, 1450159088607437073l, 600479950176257l, 137439023648l, 3539829311710167042l, 301266186154803l, 1297107070303146272l, 2459565729895153665l, 144115325514879522l, 4620833959733886976l, 1229785283872100864l, 1229782938247303441l, 
1229782938247303441l, 69905l, 142002356224l, 441654029668319232l, 1319677836121866240l, 1152961095615451425l, 2468535545754620433l, 142035910656l, 9308465440760866l, 1297041091303964736l, 76882397375758369l, 2468535545754620416l, 142035910656l, 9308465440760866l, 1297036693257453568l, 39728447488033l, 2468535545754620416l, 36028939054874624l, 1234287564085535778l, 1301840459559206929l, 39728447488033l, 2459528346499879424l, 1233986439935426560l, 1229783964492828945l, 1229782938247303441l, 
1229782938247303441l, 2167057l, 123287304668166l, 1234285373938536960l, 1153484454594085393l, 73316433953l, 2166786l, 4540051095680l, 2382703407482798080l, 1161966224695902208l, 9007199791620097l, 35184909029408l, 2305878198151282720l, 2306146611864010752l, 1301839501493084160l, 297237575423238145l, 1168835154432l, 2459563535466758688l, 1229783964491710498l, 1297038893050232832l, 153722720679362561l, 70144l, 3689348805594972160l, 1229785283872109363l, 1229782938247303441l, 
1229764173248856064l, 4369l, 276825121l, 17665487863808l, 1152921646340767744l, 9288674231451648l, 1229782938247304452l, 105557714342161l, 2378201869437632576l, 1297036697264005393l, 1233986298436395009l, 288265561064935953l, 2305878198182740000l, 2306144275401941538l, 1297036830121664512l, 9007474669654273l, 3679476088527983104l, 2324420362273554451l, 1229783964459274512l, 1297107061427020049l, 2459565875921944577l, 144115188075926050l, 485599739904l, 1229785283872100864l, 1229782938247303441l, 
1229782938247303441l, 27021597769531665l, 1229782937982992384l, 282647789113633l, 72057594040025088l, 4611686155866603521l, 1229782938248347904l, 141752865041l, 9289911182032896l, 81064793296863232l, 1229782938247303457l, 2162961l, 288230517902409728l, 1234268872388116480l, 81365033267826961l, 33l, 18014415691514144l, 1229782937979863040l, 18297115018072337l, 81064793292668928l, 274877906977l, 1229782938248347936l, 504403300018360593l, 1229765427379830848l, 76861433640456465l, 
1229782938247303441l, 5764607523040596241l, 18014403072884736l, 1234285365062270976l, 1170936177995419665l, 2382685755433549857l, 5084141769003537l, 1154047546549600256l, 2315151474654446594l, 1299288973550686225l, 2382404280456847393l, 5084142305874433l, 1152956831014846464l, 2315151474654707730l, 1297037865478389760l, 77595746337l, 5084141769003524l, 1154047546550718464l, 1234287564085542930l, 1297036697264066561l, 77577846817l, 5084141769003520l, 1126041942753280l, 1229783981638287362l, 1229782938247303441l, 
1229782938247303441l, 6180376849l, 2378200911930474496l, 9306408419853312l, 1306344132181041473l, 4580245537l, 18697068548625l, 1225279407356380416l, 9308538757201920l, 1306327565942653185l, 144415501353812001l, 81065897101430817l, 1225331084370182673l, 1234285506830795296l, 1450442822766301185l, 149746891196792865l, 1301822046461825552l, 281617013670417l, 4620994621340652032l, 1161930902884843521l, 145241087986962721l, 1229782937963139616l, 142037029137l, 1229783964458156160l, 1229782938247303441l, 
};

	 public final static byte [] getLabyrinth(int id)
	 {
	   id=indexes[id];
	   try {
 	    byte[] img = new byte[id&0xffff];
	    id>>>=16;
	    int pos = 0;
	    long n=0;
	    while (pos < img.length) {
	      if ((pos&15)==0)
	      /* if (pos == 0) n = storage[0];
	         else */ n=storage[id+(pos>>4)];
	      img[pos++]=(byte)(n&15);
	      n>>>=4;
	    }
               return img;
	   } catch (Exception e) {return null;}
	 }


}