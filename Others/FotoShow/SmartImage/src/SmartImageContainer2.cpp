/*
* ============================================================================
*  Name     : CSmartImageContainerShow from SmartImageContainer2.cpp
*  Part of  : SmartImage
*  Created  : 06/05/2003 by Oleg Golosovskiy
*  Implementation notes:
*     Initial content was generated by Series 60 AppWizard.
*  Version  :
*  Copyright: http://www.sw4u.org/
* ============================================================================
*/

// INCLUDE FILES
#include "SmartImageContainer2.h"
#include <aknutils.h>
#include "SmartImageAppUi.h"


// ================= MEMBER FUNCTIONS =======================

_LIT(KDateString,"%-B%:0%J%:1%T%:2%S%");

// ---------------------------------------------------------
// CSmartImagesContainer::ConstructL(const TRect& aRect)
// EPOC two phased constructor
// ---------------------------------------------------------
//
void CSmartImageContainerShow::ConstructL(const TRect& aRect)
    {
    CreateWindowL();

	iImage = 0;
	iImage = new (ELeave) CEikImage();
    iImage ->SetContainerWindowL( *this );

	if(iImage)
        {
        CleanupStack::PushL(iImage);   
		CFbsBitmap* bitmap = new (ELeave) CFbsBitmap;
		bitmap->Create(TSize(0,0),EColor4K);
        CFbsBitmap* bitmapM = NULL;
		iImage->SetPicture(bitmap, bitmapM);
	    iImage->SetExtent(TPoint(0,0),TSize(aRect.Size()));
        CleanupStack::Pop(); // iImage
        }

    SetRect(aRect);
    ActivateL();
    }

// Destructor
CSmartImageContainerShow::~CSmartImageContainerShow()
{
	delete iImage;
}

// ---------------------------------------------------------
// CSmartImagesContainer::SizeChanged()
// Called by framework when the view size is changed
// ---------------------------------------------------------
//
void CSmartImageContainerShow::SizeChanged()
    {
    // TODO: Add here control resize code etc.
    }

// ---------------------------------------------------------
// CSmartImagesContainer::CountComponentControls() const
// ---------------------------------------------------------
//
TInt CSmartImageContainerShow::CountComponentControls() const
    {
    return 0; // return nbr of controls inside this container
    }

// ---------------------------------------------------------
// CSmartImagesContainer::ComponentControl(TInt aIndex) const
// ---------------------------------------------------------
//
CCoeControl* CSmartImageContainerShow::ComponentControl(TInt aIndex) const
    {
    switch ( aIndex )
        {
		case 0:
            return 0;//iImage;
        default:
            return NULL;
        }
    }

// ---------------------------------------------------------
// CSmartImagesContainer::Draw(const TRect& aRect) const
// ---------------------------------------------------------
//
void CSmartImageContainerShow::Draw(const TRect& aRect) const
{
	CWindowGc& gc = SystemGc();
    gc.SetPenStyle(CGraphicsContext::ENullPen);
    gc.SetBrushStyle(CGraphicsContext::ESolidBrush);
	gc.SetBrushColor(KRgbWhite);
	gc.DrawRect(aRect);

	const CSmartImageAppUi::TLoadInfo& info = iAppUi->GetLoadInfo();

	if((info.iStatus != CImageConverter::EStopLStatus))
	{
		if((info.iStatus == CImageConverter::ECompleteLStatus)&&
			(iImage->Bitmap()->Header().iSizeInPixels.iHeight!=0))
		{
			const CFbsBitmap* bitmap = iImage->Bitmap();
			TPoint lefttop(0,0);

			if(bitmap->SizeInPixels().iHeight<Rect().Size().iHeight)
				lefttop.iY = ((Rect().Size().iHeight) - (bitmap->SizeInPixels().iHeight))/2;

			if(bitmap->SizeInPixels().iWidth<Rect().Size().iWidth)
				lefttop.iX = ((Rect().Size().iWidth) - (bitmap->SizeInPixels().iWidth))/2;

			if (bitmap != NULL)
				gc.BitBlt(lefttop,bitmap,aRect);


			gc.SetPenColor(KRgbWhite);
			DrawText(gc,0);
			gc.SetPenColor(KRgbBlack);
			DrawText(gc,1);


		}
		else
		{
			gc.UseFont(LatinBold13());
			gc.SetPenColor(KRgbBlack);
			switch(info.iStatus)
			{
			case CImageConverter::EConvertingLStatus:
					gc.DrawText(_L("Converting ..."),TPoint(40,80));
					break;
			case CImageConverter::EOpeningLStatus:
					gc.DrawText(_L("Opening ..."),TPoint(40,80));
					break;
			case CImageConverter::EScalingLStatus:
					gc.DrawText(_L("Scaling ..."),TPoint(40,80));
					break;
			default:
					gc.DrawText(_L("Error ..."),TPoint(40,80));

			}
		}
		
	}
	else
	{
		gc.UseFont(LatinBold13());
		gc.SetPenColor(KRgbBlack);
		gc.DrawText(_L("Image not found"),TPoint(40,80));
	}

}

// ---------------------------------------------------------
// CSmartImagesContainer::HandleControlEventL(
//     CCoeControl* aControl,TCoeEvent aEventType)
// ---------------------------------------------------------
//
void CSmartImageContainerShow::HandleControlEventL(
    CCoeControl* /*aControl*/,TCoeEvent /*aEventType*/)
    {

    // TODO: Add your control event handler code here
    }

// End of File  

void CSmartImageContainerShow::DrawText(CWindowGc& aGc,TInt aOffset) const
{
	const TPoint leftbottom (5,150);
	const CSmartImageAppUi::TLoadInfo& info = iAppUi->GetLoadInfo();

	aGc.UseFont(LatinBold19());
	TPoint fp(leftbottom.iX+aOffset,leftbottom.iY+aOffset-20);


	// email
	if((iAppUi->SettingsC().iDetailEmail==TSmiSettings::EShow)&&
		(info.iEMail.Length()!=0))
	{
		aGc.DrawText(info.iEMail,fp);
		fp.iY -= 20;
	}

	// phone
	if((iAppUi->SettingsC().iDetailPhone==TSmiSettings::EShow)&&
		(info.iNumber.Length()!=0))
	{
		aGc.DrawText(info.iNumber,fp);
		fp.iY -= 20;
	}

	// last name
	if((iAppUi->SettingsC().iDetailLastName==TSmiSettings::EShow)&&
		(info.iLastName.Length()!=0))
	{
		aGc.DrawText(info.iLastName,fp);
		fp.iY -= 20;
	}

	// first name
	if((iAppUi->SettingsC().iDetailFirstName==TSmiSettings::EShow)&&
		(info.iFirstName.Length()!=0))
	{
		aGc.DrawText(info.iFirstName,fp);
		fp.iY -= 20;
	}
	
	
	if(iAppUi->SettingsC().iDetailDuration==TSmiSettings::EShow)
	{
		TName duration;
		TTime time(0);
		time += TTimeIntervalSeconds(info.iDuration);
		time.FormatL(duration,KDateString);
		aGc.UseFont(ClockBold30());
		aGc.DrawText(duration,TPoint(50+aOffset,37+aOffset));
	}
		
}
